/*
* tabDropdown version 1.0
* Author: Anish MM - anishmm@gmail.com
* (c) 2012, Anish MM
* Dependencies: jQuery v1.6+, jQuery UI 1.8+
* 
* Description:
* tabDropdown extends jQuery UI tabs to include a dropdown for when tabs break to the maxTab count
*
* Usage:
* 
* Simple:
* 		$("#mytab").tabDropdown();
*
* 	Options:
*  		$("#mytab").tabDropdown({
*  			className: "tabDropdown",       // classname for css
*  			Active: true,                   // Active dropdown features
*  			dropDownText: "More",               // set drop down text
*  			showCount: false,               // show drop down count
*  			dropIcon: "&#9660; ",           // icon/caret - if using image, specify image width
*  			dropWidth: "30%",               // width of dropdown
*              maxTab: 4                       // max tab
*  		});
*/
(function (b) { var a = { init: function (c) { if (c === undefined) { c = {} } c = b.extend({}, b.fn.tabDropdown.defaults, c); return this.each(function () { var e = c, j = b(this); (e.className != "") && j; j.tabs(); if (e.Active) { var g = b("<div />").addClass(e.className).appendTo(j); var h = j.find(".ui-tabs-nav"); var i = h.find("li"); var f = (i.length - e.maxTab); if (f > 0) { var k, l = b("<li/>").addClass("ui-state-default").addClass("ui-corner-top").addClass("dropDown").appendTo(h); var d = b("<a/>").attr("href", "javascript: void(0);").html(e.dropIcon + e.dropDownText + (e.showCount === true ? " (" + f + ")" : "")).appendTo(l); d.click(function () { clearTimeout(k); g.slideDown(); k = setTimeout(function () { g.slideUp(); clearTimeout(k) }, 3000); var m = b(this).parent().offset(); m.top = (m.top + b(this).parent().height() + 1); g.offset(m).css("width", e.dropWidth) }); g.mouseenter(function () { clearTimeout(k) }); g.mouseleave(function () { clearTimeout(k); var m = b(this); k = setTimeout(function () { m.slideUp() }, 1000) }); i.each(function (o, n) { if ((e.maxTab - 1) < o) { b(n).css("display", "none"); var m = b(this).find("a"); var p = b("<a/>").attr("href", "#tab").html(m.text()); p.click(function (q) { g.slideUp(); g.find("a").removeClass("highlight"); m.click(); h.find(".dropDown").addClass("ui-tabs-selected").addClass("ui-state-active").find("a").css("cursor", "pointer"); b(this).addClass("highlight") }).appendTo(g) } else { b(n).find("a").click(function (q) { g.find("a").removeClass("highlight"); h.find(".dropDown").removeClass("ui-tabs-selected").removeClass("ui-state-active") }) } }) } } }) } }; b.fn.tabDropdown = function (c) { if (a[c]) { return a[c].apply(this, Array.prototype.slice.call(arguments, 1)) } else { if (typeof c === "object" || !c) { return a.init.apply(this, arguments) } else { b.error("Method " + c + " does not exist on $.tabDropdown") } } }; b.fn.tabDropdown.defaults = { className: "tabDropdown", Active: true, dropDownText: "More", showCount: false, dropIcon: "&#9660; ", dropWidth: "66%", maxTab: 4} })(jQuery);